import time

class Player:
    def __init__(self, num_stone, num_points):
        self.num_stone = num_stone
        self.num_points = num_points


def game_end(akm):
    return akm < 2


def evaluation(akm, num_points1, num_points2):
    #print("  ", num_points1, "  ", num_points2)
    return num_points1 - num_points2


def pointscalc(move, player, akm, num_points1, num_points2):
    if player == "ai1":
        akmd = akm
        if move > 2 and akm > 2:
            num_points1 += 3
            akmd -= 3
        else:
            if akm >= 2:
                move = 2
                num_points1 += 2
                akmd -= 2
        if akmd % 2 == 0 and move<=akm:
            num_points2 += 2
        if akmd % 2 == 1  and move<=akm:
            num_points1 += 2
        akm = akmd
    else:
        akmd=akm
        if move > 2 and akm > 2:
            num_points2 += 3
            akmd -= 3
        else:
            if akm >= 2:
                move = 2
                num_points2 += 2
                akmd -= 2
        if akmd % 2 == 0  and move<=akm:
            num_points1 += 2
        if akmd % 2 == 1  and move<=akm:
            num_points2 += 2
        akm = akmd
    return num_points1, num_points2, akm


def minimax(akm, num_points1, num_points2, depth, is_maximizing, alpha, beta):
    if game_end(akm) or depth == 0:
        return evaluation(akm, num_points1, num_points2), None

    if is_maximizing:
        max_eval = -float('inf')
        best_move = None

        for ai1_move in [2, 3]:
            num_points1d = num_points1
            num_points2d = num_points2
            akmdd = akm
            num_points1, num_points2, akm = pointscalc(ai1_move, "ai1", akm, num_points1, num_points2)
            eval, _ = minimax(akm, num_points1, num_points2, depth - 1, False, alpha, beta)
            num_points1 = num_points1d
            num_points2 = num_points2d
            akm = akmdd
            if eval > max_eval:
                max_eval = eval
                best_move = ai1_move
            alpha = max(alpha, max_eval)

            if beta <= alpha:
                break

        return max_eval, best_move
    else:
        min_eval = float('inf')
        best_move = None
        for ai2_move in [2, 3]:
            num_points1d = num_points1
            num_points2d = num_points2
            akmdd = akm
            num_points1, num_points2, akm = pointscalc(ai2_move, "ai2", akm, num_points1, num_points2)
            eval, _ = minimax(akm, num_points1, num_points2, depth - 1, True, alpha, beta)
            num_points1 = num_points1d
            num_points2 = num_points2d
            akm = akmdd
            if eval < min_eval:
                min_eval = eval
                best_move = ai2_move

            beta = min(beta, min_eval)
            if beta <= alpha:
                break

        return min_eval, best_move

def best_move(akm, num_points1, num_points2, depth, is_maximizing):
    alpha = -float('inf')
    beta = float('inf')
    
    eval, ai_move = minimax(akm, num_points1, num_points2, depth, is_maximizing, alpha, beta)

    print(f"AI1: I take {ai_move}" if is_maximizing else f"AI2: I take {ai_move}")
    return ai_move

def main():
    depth = 100
    human = Player(0, 0)
    ai1 = Player(0, 0)
    ai2 = Player(0, 0)
    akm = int(input("akmenu sk.:"))
    # akm = 65

    while True:
        print("____________________")
        print("PLAYER_1")
        ai1_move = best_move(akm, ai1.num_points, ai2.num_points, depth, True)
        ai1.num_points, ai2.num_points, akm = pointscalc(ai1_move, "ai1", akm, ai1.num_points, ai2.num_points)
        print(f"akm: {akm}   Eval: {ai1.num_points - ai2.num_points}")
        print(f"Score:    {ai1.num_points}   {ai2.num_points}")
        if game_end(akm):
            break
        
        print("____________________")
        print("PLAYER_2")
        ai2_move = best_move(akm, ai1.num_points, ai2.num_points, depth, False)
        ai1.num_points, ai2.num_points, akm = pointscalc(ai2_move, "ai2", akm, ai1.num_points, ai2.num_points)
        print(f"akm: {akm}   Eval: {ai1.num_points - ai2.num_points}")
        print(f"Score:    {ai1.num_points}   {ai2.num_points}")
        if game_end(akm):
            break
        
    print(f"Eval: {ai1.num_points - ai2.num_points}")
    print(f"{ai1.num_points}   {ai2.num_points}")
    print("end")


if __name__ == "__main__":
    start = time.time()
    main()
    end = time.time()
    print("___________________")
    print(end - start)
